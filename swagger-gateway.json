{
	"swagger": "2.0",
	"info": {
		"description": "Piazza Core Services API",
		"version": "0.1.0",
		"title": "Gateway API",
		"contact": {
			"name": "The VeniceGeo Project",
			"url": "http://radiantblue.com",
			"email": "venice@radiantblue.com"
		}
	},
	"host": "localhost:8081",
	"basePath": "/",
	"tags": [{
		"name": "data-controller",
		"description": "Data Controller"
	}, {
		"name": "event-controller",
		"description": "Event Controller"
	}, {
		"name": "service-controller",
		"description": "Service Controller"
	}, {
		"name": "deployment-controller",
		"description": "Deployment Controller"
	}, {
		"name": "job-controller",
		"description": "Job Controller"
	}, {
		"name": "alert-trigger-controller",
		"description": "Alert Trigger Controller"
	}],
	"paths": {
		"/alert": {
			"get": {
				"tags": ["Alert", "Workflow"],
				"summary": "Get User Alerts",
				"description": "Gets all of the Alerts for the currently authenticated user. Alerts occur when a Trigger's conditions are met.",
				"operationId": "getAlertsUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "page",
					"in": "query",
					"description": "Paginating large numbers of results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}, {
					"name": "order",
					"in": "query",
					"description": "Indicates ascending or descending order.",
					"required": false,
					"type": "string",
					"default": "asc"
				}, {
					"name": "key",
					"in": "query",
					"description": "A general keyword search to apply to all alerts.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The list of Alerts owned by the current User.",
						"schema": {
							"$ref": "#/definitions/AlertResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/alert/{alertId}": {
			"get": {
				"tags": ["Alert", "Workflow"],
				"summary": "Get Alert Information",
				"description": "Gets the metadata for a single Alert; referenced by ID.",
				"operationId": "getAlertUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "alertId",
					"in": "path",
					"description": "The ID of the Alert to retrieve metadata for.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The Alert metadata.",
						"schema": {
							"$ref": "#/definitions/Alert"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Alert", "Workflow"],
				"summary": "Delete Alert",
				"description": "Deletes an Alert; referenced by ID.",
				"operationId": "deleteAlertUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "alertId",
					"in": "path",
					"description": "The ID of the Alert to Delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/data": {
			"get": {
				"tags": ["Data"],
				"summary": "Query Piazza Data",
				"description": "Sends a simple GET Query for fetching lists of Piazza Data.",
				"operationId": "getDataUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "keyword",
					"in": "query",
					"description": "A general keyword search to apply to all Datasets.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large datasets. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}, {
					"name": "userName",
					"in": "query",
					"description": "Filter for the username that published the service.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The list of Search results that match the query string.",
						"schema": {
							"$ref": "#/definitions/DataResourceResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Data"],
				"summary": "Load Data into Piazza",
				"description": "Loads data into the Piazza Core metadata holdings. Piazza can either host the data, or reflect an external location where the data is stored. Data must be loaded into Piazza before core components such as the Service Controller, or other external services, are able to consume that data.",
				"operationId": "ingestDataUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "data",
					"description": "The description, location, and metadata for the Data to be loaded into Piazza.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/LoadJob"
					}
				}],
				"responses": {
					"200": {
						"description": "The ID of the Job created to handle the Loading of the Data.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/data/file": {
			"post": {
				"tags": ["Data"],
				"summary": "Load a Data File into Piazza",
				"description": "Loads a local user data file into the Piazza Core metadata holdings. This functions the same as /data endpoint, but a file is specified instead of a URI.",
				"operationId": "ingestDataFileUsingPOST",
				"consumes": ["multipart/form-data"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "data",
					"in": "query",
					"description": "The Load Job metadata. This is the identical model to the LoadJob as specified in the body of the /data request. It is only noted as a string type here because of a Swagger deficiency.",
					"required": true,
					"type": "string"
				}, {
					"name": "file",
					"in": "formData",
					"description": "The file to be uploaded.",
					"required": true,
					"type": "file"
				}],
				"responses": {
					"200": {
						"description": "The ID of the Job created to handle the Loading of the Data.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/data/me": {
			"get": {
				"tags": ["Data"],
				"summary": "Query Piazza Data",
				"description": "Sends a simple GET Query for fetching lists of Piazza Data.",
				"operationId": "getDataForCurrentUserUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "keyword",
					"in": "query",
					"description": "A general keyword search to apply to all Datasets.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large datasets. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The list of Search results that match the query string.",
						"schema": {
							"$ref": "#/definitions/DataResourceResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/data/query": {
			"post": {
				"tags": ["Data", "Search"],
				"summary": "Query Metadata in Piazza Data holdings",
				"description": "Sends a complex query message to the Piazza Search component, that allow users to search for loaded data. Searching is capable of filtering by keywords, spatial metadata, or other dynamic information.",
				"operationId": "searchDataUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "query",
					"description": "The Query string for the Search component.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/SearchRequest"
					}
				}],
				"responses": {
					"200": {
						"description": "The list of Search results that match the query string.",
						"schema": {
							"$ref": "#/definitions/DataResourceResults"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/data/{dataId}": {
			"get": {
				"tags": ["Data"],
				"summary": "Get Metadata for Loaded Data",
				"description": "Reads all metadata for a Data item that has been previously loaded into Piazza.",
				"operationId": "getMetadataUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "dataId",
					"in": "path",
					"description": "ID of the Data item to pull Metadata for.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Metadata describing the Data Item that matches the specified Data ID. Includes release metadata, and spatial metadata, etc.",
						"schema": {
							"$ref": "#/definitions/DataResourceResponse"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Data"],
				"summary": "Update Metadata for Loaded Data.",
				"description": "This will update the metadata for a specific data item. Non-null values will overwrite. This will only update the corresponding 'metadata' field in the Data item. Spatial metadata, and file information cannot be updated. For cases where spatial data or file data needs to change, an re-load of the data must be done.",
				"operationId": "updateMetadataUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "dataId",
					"in": "path",
					"description": "ID of the Data item to update the Metadata for.",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "metadata",
					"description": "The Resource Metadata object containing the updated metadata fields to write.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ResourceMetadata"
					}
				}],
				"responses": {
					"200": {
						"description": "Confirmation that the Metadata has been updated.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Data"],
				"summary": "Delete Loaded Data",
				"description": "Deletes an entry to Data that has been previously loaded into Piazza. If the file was hosted by Piazza, then that file will also be deleted.",
				"operationId": "deleteDataUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["*/*"],
				"parameters": [{
					"name": "dataId",
					"in": "path",
					"description": "ID of the Data item to Delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Confirmation of delete",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/deployment": {
			"get": {
				"tags": ["Deployment"],
				"summary": "Obtain a list of all GeoServer deployments held by Piazza.",
				"description": "Data can be made available through the Piazza GeoServer as WMS/WCS/WFS. This must be done through POSTing to the /deployment endpoint. This endpoint will return a list of all Deployed resources.",
				"operationId": "getDeploymentUsingGET_1",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "keyword",
					"in": "query",
					"description": "A general keyword search to apply to all Deployments.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large datasets. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The list of Search results that match the query string.",
						"schema": {
							"$ref": "#/definitions/DeploymentResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Data", "Deployment"],
				"summary": "Obtain a GeoServer deployment for a Data Resource object",
				"description": "Data that has been loaded into Piazza can be deployed to GeoServer. This will copy the data to the GeoServer data directory (if needed), or point to the Piazza PostGIS; and then create a WMS/WCS/WFS layer (as available) for the service. Only data that has been internally hosted within Piazza can be deployed.",
				"operationId": "createDeploymentUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "data",
					"description": "The Data ID and deployment information for creating the Deployment",
					"required": true,
					"schema": {
						"$ref": "#/definitions/AccessJob"
					}
				}],
				"responses": {
					"200": {
						"description": "The Job ID for the specified Deployment. This could be a long-running process to copy the data over to GeoServer, so a new Job is spawned.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/deployment/{deploymentId}": {
			"get": {
				"tags": ["Deployment"],
				"summary": "Get Deployment Metadata",
				"description": "Fetches the Metadata for a Piazza Deployment.",
				"operationId": "getDeploymentUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "deploymentId",
					"in": "path",
					"description": "ID of the Deployment to Fetch",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The metadata about the Deployment. Contains the unique ID of the deployment; the Data ID that it represents; and server information regarding the access of the deployed service (likely GeoServer) including the GetCapabilities document.",
						"schema": {
							"$ref": "#/definitions/Deployment"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Deployment"],
				"summary": "Remove an active deployment",
				"description": "If a user wishes to delete a deployment before its lease time is up (and automatic deletion could take place) then this endpoint provides a way to do so manually.",
				"operationId": "deleteDeploymentUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["*/*"],
				"parameters": [{
					"name": "deploymentId",
					"in": "path",
					"description": "ID of the Deployment to Delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Confirmation that the deployment has been deleted.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/event": {
			"get": {
				"tags": ["Event", "Workflow"],
				"summary": "Get all Events",
				"description": "Retrieves a list of all Events.",
				"operationId": "getEventsUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "eventType",
					"in": "query",
					"description": "The name of the event type to filter by.",
					"required": false,
					"type": "string"
				}, {
					"name": "key",
					"in": "query",
					"description": "The field to use for sorting.",
					"required": false,
					"type": "string"
				}, {
					"name": "order",
					"in": "query",
					"description": "Indicates ascending or descending order.",
					"required": false,
					"type": "string",
					"default": "asc"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large numbers of results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The list of Events.",
						"schema": {
							"$ref": "#/definitions/EventResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Event", "Workflow"],
				"summary": "Creates an Event for the Event Type",
				"description": "Fires an Event with the Piazza Workflow component. Events must conform to the specified Event Type.",
				"operationId": "fireEventUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "event",
					"description": "The Event JSON object.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Event"
					}
				}],
				"responses": {
					"200": {
						"description": "The ID of the newly created Event",
						"schema": {
							"$ref": "#/definitions/WorkflowResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/event/{eventId}": {
			"get": {
				"tags": ["Event", "Workflow"],
				"summary": "Get a specifc Event",
				"description": "Gets a specific Event by it's ID, that corresponds with the Event Type.",
				"operationId": "getEventInformationUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "eventId",
					"in": "path",
					"description": "The Event ID for the event to retrieve.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The requested Event.",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Event", "Workflow"],
				"summary": "Delete a specific Event",
				"description": "Deletes a specific Event by it's ID, that corresponds with the Event Type.",
				"operationId": "deleteEventUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "eventId",
					"in": "path",
					"description": "The Event ID for the event to delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Confirmation of delete.",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/eventType": {
			"get": {
				"tags": ["Event Type", "Workflow"],
				"summary": "List Event Types",
				"description": "Lists all Event Types that have been registered with the Piazza Workflow service.",
				"operationId": "getEventTypesUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "key",
					"in": "query",
					"description": "The field to use for sorting.",
					"required": false,
					"type": "string"
				}, {
					"name": "order",
					"in": "query",
					"description": "Indicates ascending or descending order.",
					"required": false,
					"type": "string",
					"default": "asc"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large numbers of results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The list of Event Types.",
						"schema": {
							"$ref": "#/definitions/EventTypeResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Event Type", "Workflow"],
				"summary": "Register an Event Type",
				"description": "Defines an Event Type with the Workflow component, that defines a schema that Events can conform to and be fired for.",
				"operationId": "createEventTypeUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "eventType",
					"description": "The Event Type information. This defines the Schema for the Events that must be followed.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/EventType"
					}
				}],
				"responses": {
					"200": {
						"description": "The ID of the newly created Event Type",
						"schema": {
							"$ref": "#/definitions/WorkflowResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/eventType/{eventTypeId}": {
			"get": {
				"tags": ["Event Type", "Workflow"],
				"summary": "Get an Event Type",
				"description": "Returns the metadata for a specific Event Type by its unique identifier.",
				"operationId": "getEventTypeUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "eventTypeId",
					"in": "path",
					"description": "The unique identifier for the Event Type.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The Event Type metadata.",
						"schema": {
							"$ref": "#/definitions/EventType"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Event Type", "Workflow"],
				"summary": "Delete an Event Type",
				"description": "Deletes a specific Event Type, specified by its unique identifier.",
				"operationId": "deleteEventTypeUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "eventTypeId",
					"in": "path",
					"description": "The unique identifier for the Event Type to delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Confirmation of Event Type deletion.",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/file/{dataId}": {
			"get": {
				"tags": ["Data"],
				"summary": "Download Data File",
				"description": "Gets the Bytes of Data loaded into Piazza. Only works for data that is stored internally by Piazza.",
				"operationId": "getFileUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "dataId",
					"in": "path",
					"description": "The ID of the Data to download.",
					"required": true,
					"type": "string"
				}, {
					"name": "fileName",
					"in": "query",
					"description": "Specify the name of the file that the user wishes to retrieve the data as. This will set the content-disposition header.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The downloaded data file.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "byte"
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/job/{jobId}": {
			"get": {
				"tags": ["Job"],
				"summary": "Get Job Status",
				"description": "Fetches the Status for a single Piazza Job.",
				"operationId": "getJobStatusUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "jobId",
					"in": "path",
					"description": "ID of the Job to Fetch",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Information regarding the requested Job. At bare minimum, this will contain the Job ID of the Job that has been spawned as a result of the POSTed message. If more information is available, such as Status, it will also be included.",
						"schema": {
							"$ref": "#/definitions/JobStatus"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": ["Job"],
				"summary": "Repeat Job",
				"description": "Repeats a previously submitted Job. This will clone the original Job, and run it again with identical parameters, using the requesting users authentication in the new Job.",
				"operationId": "repeatJobUsingPUT",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "jobId",
					"in": "path",
					"description": "ID of the Job to Repeat",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "A new Job ID that corresponds to the cloned Job in Piazza.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Job"],
				"summary": "Abort Job",
				"description": "Cancels a Running Job. If the Job is already completed in some way, then cancellation will not occur.",
				"operationId": "abortJobUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "jobId",
					"in": "path",
					"description": "ID of the Job to cancel.",
					"required": true,
					"type": "string"
				}, {
					"name": "reason",
					"in": "query",
					"description": "Details for the cancellation of the Job.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The Job has requested to be cancelled. This may take some time, as the process may not be in an easily cancelled state at the time the request is made.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/service": {
			"get": {
				"tags": ["Service"],
				"summary": "Retrieve list of Services",
				"description": "Retrieves the list of available Services currently registered to this Piazza system.",
				"operationId": "getServicesUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "keyword",
					"in": "query",
					"description": "A general keyword search to apply to all Services.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}, {
					"name": "userName",
					"in": "query",
					"description": "Filter for the username that published the service.",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The list of Services registered to Piazza.",
						"schema": {
							"$ref": "#/definitions/ServiceResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Service"],
				"summary": "Register new Service definition",
				"description": "Creates a new Service with the Piazza Service Controller; that can be invoked through Piazza jobs with Piazza data.",
				"operationId": "registerServiceUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "service",
					"description": "The metadata for the service. This includes the URL, parameters, inputs and outputs. It also includes other release metadata such as classification and availability.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Service"
					}
				}],
				"responses": {
					"200": {
						"description": "The ID of the newly created Service",
						"schema": {
							"$ref": "#/definitions/ServiceResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/service/me": {
			"get": {
				"tags": ["Service"],
				"summary": "Retrieve list of Services",
				"description": "Retrieves the list of available Services currently registered to this Piazza system.",
				"operationId": "getServicesForCurrentUserUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "keyword",
					"in": "query",
					"description": "A general keyword search to apply to all Services.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}],
				"responses": {
					"200": {
						"description": "The list of Services registered to Piazza.",
						"schema": {
							"$ref": "#/definitions/ServiceResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/service/query": {
			"post": {
				"tags": ["Search", "Service"],
				"summary": "Query Metadata in Piazza Services",
				"description": "Sends a complex query message to the Piazza Search component, that allow users to search for registered Services. Searching is capable of filtering by keywords, spatial metadata, or other dynamic information.",
				"operationId": "searchServicesUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "search",
					"description": "The Query string for the Search component.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/SearchRequest"
					}
				}],
				"responses": {
					"200": {
						"description": "The list of Search results that match the query string.",
						"schema": {
							"$ref": "#/definitions/ServiceResults"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/service/{serviceId}": {
			"get": {
				"tags": ["Service"],
				"summary": "Retrieve Service information",
				"description": "Retrieves the information and metadata for the specified Service matching the ID.",
				"operationId": "getServiceUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "serviceId",
					"in": "path",
					"description": "The ID of the Service to retrieve.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "The Service object.",
						"schema": {
							"$ref": "#/definitions/Service"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"put": {
				"tags": ["Service"],
				"summary": "Update Service Information",
				"description": "Updates a Service Metadata, with the Service to updated specified by its ID.",
				"operationId": "updateServiceUsingPUT",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "serviceId",
					"in": "path",
					"description": "The ID of the Service to Update.",
					"required": true,
					"type": "string"
				}, {
					"in": "body",
					"name": "service",
					"description": "The Service Metadata. All properties specified in the Service data here will overwrite the existing properties of the Service.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Service"
					}
				}],
				"responses": {
					"200": {
						"description": "Confirmation of Update.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Service"],
				"summary": "Unregister a Service",
				"description": "Unregisters a service by its ID.",
				"operationId": "deleteServiceUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "serviceId",
					"in": "path",
					"description": "The ID of the Service to unregister.",
					"required": true,
					"type": "string"
				}, {
					"name": "softDelete",
					"in": "query",
					"description": "softDelete",
					"required": false,
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "Confirmation of Deleted.",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/trigger": {
			"get": {
				"tags": ["Trigger", "Workflow"],
				"summary": "List Triggers",
				"description": "Lists all of the defined Triggers in the Piazza Workflow component.",
				"operationId": "getTriggersUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "key",
					"in": "query",
					"description": "A general keyword search to apply to all triggers.",
					"required": false,
					"type": "string"
				}, {
					"name": "page",
					"in": "query",
					"description": "Paginating large numbers of results. This will determine the starting page for the query.",
					"required": false,
					"type": "integer",
					"format": "int32"
				}, {
					"name": "per_page",
					"in": "query",
					"description": "The number of results to be returned per query.",
					"required": false,
					"type": "integer",
					"default": 10,
					"format": "int32"
				}, {
					"name": "order",
					"in": "query",
					"description": "Indicates ascending or descending order.",
					"required": false,
					"type": "string",
					"default": "asc"
				}],
				"responses": {
					"200": {
						"description": "The list of Triggers.",
						"schema": {
							"$ref": "#/definitions/TriggerResults"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"post": {
				"tags": ["Trigger", "Workflow"],
				"summary": "Creates a Trigger",
				"description": "Creates a new Trigger with the Piazza Workflow component.",
				"operationId": "createTriggerUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "trigger",
					"description": "The Trigger information to register. This defines the Conditions that must be hit in order for some Action to occur.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Trigger"
					}
				}],
				"responses": {
					"200": {
						"description": "The ID of the newly created Trigger",
						"schema": {
							"$ref": "#/definitions/WorkflowResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		},
		"/trigger/{triggerId}": {
			"get": {
				"tags": ["Trigger", "Workflow"],
				"summary": "Gets Metadata for a Trigger",
				"description": "Retrieves the Trigger definition for the Trigger matching the specified Trigger ID.",
				"operationId": "getTriggerUsingGET",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "triggerId",
					"in": "path",
					"description": "The ID of the Trigger to retrieve.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Retrieves the Trigger definition for the Trigger matching the specified Trigger ID.",
						"schema": {
							"$ref": "#/definitions/Trigger"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			},
			"delete": {
				"tags": ["Trigger", "Workflow"],
				"summary": "Deletes a Trigger",
				"description": "Deletes a Trigger with the Workflow component. This Trigger will no longer listen for conditions for events to fire.",
				"operationId": "deleteTriggerUsingDELETE",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"name": "triggerId",
					"in": "path",
					"description": "The ID of the Trigger to delete.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"204": {
						"description": "No Content"
					},
					"403": {
						"description": "Forbidden"
					}
				}
			}
		},
		"/v2/job": {
			"post": {
				"tags": ["Job", "Service"],
				"summary": "Executes a registered Service",
				"description": "Creates a Piazza Job to execute a registered service in the system, with the specified parameters.",
				"operationId": "executeServiceUsingPOST",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "The Payload that describes the Service to be executed, and the inputs for that service.",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ExecuteJob"
					}
				}],
				"responses": {
					"200": {
						"description": "The Job ID for the execution of the Service. This can be queried using Job Status to track progress and, when available, fetch the result object.",
						"schema": {
							"$ref": "#/definitions/PiazzaResponse"
						}
					},
					"201": {
						"description": "Created"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Not Found"
					}
				}
			}
		}
	},
	"definitions": {
		"TextDataType": {
			"type": "object",
			"properties": {
				"content": {
					"type": "string"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"PointCloudDataType": {
			"type": "object",
			"properties": {
				"location": {
					"$ref": "#/definitions/FileLocation"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"SearchRequest": {
			"type": "object",
			"required": ["query"],
			"properties": {
				"query": {
					"type": "object",
					"description": "ElasticSearch DSL Query Object."
				}
			}
		},
		"PiazzaResponse": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"DataResourceResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"data": {
					"type": "array",
					"description": "The array of Data Resource results.",
					"items": {
						"$ref": "#/definitions/DataResource"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"EventType": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"id": {
					"type": "string",
					"description": "The unique identifier of this Event Type."
				},
				"mapping": {
					"type": "object",
					"description": "The map of key-value pairs that define the properties of this Event Type. The key is the name of the property, and the value is the type of that property. Valid types are 'string' and 'integer'.",
					"additionalProperties": {
						"type": "string"
					}
				},
				"name": {
					"type": "string",
					"description": "The human-readable name for this Event Type."
				}
			}
		},
		"EventResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"events": {
					"type": "array",
					"description": "The array of Event results.",
					"items": {
						"$ref": "#/definitions/Event"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"Deployment": {
			"type": "object",
			"properties": {
				"capabilitiesUrl": {
					"type": "string",
					"description": "Fully qualified URL for accessing the GetCapabilities action for the deployment service."
				},
				"dataId": {
					"type": "string",
					"description": "The unique identifier of the Data that this deployment hosts."
				},
				"host": {
					"type": "string",
					"description": "The host name for the deployment server."
				},
				"id": {
					"type": "string",
					"description": "The unique identifier for this Deployment."
				},
				"layer": {
					"type": "string",
					"description": "The layer name for the hosted service on the deployment server."
				},
				"port": {
					"type": "string",
					"description": "The port number for the deployment server. "
				}
			}
		},
		"TriggerResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"triggers": {
					"type": "array",
					"description": "The array of Trigger results.",
					"items": {
						"$ref": "#/definitions/Trigger"
					}
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"DataTypeInterface": {
			"type": "object",
			"properties": {
				"impl01": {
					"description": "BodyDataType Implementation",
					"$ref": "#/definitions/BodyDataType"
				},
				"impl02": {
					"description": "GeoJsonDataType Implementation",
					"$ref": "#/definitions/GeoJsonDataType"
				},
				"impl03": {
					"description": "LiteralDataType Implementation",
					"$ref": "#/definitions/LiteralDataType"
				},
				"impl04": {
					"description": "PointCloudDataType Implementation",
					"$ref": "#/definitions/PointCloudDataType"
				},
				"impl05": {
					"description": "PostGISDataType Implementation",
					"$ref": "#/definitions/PostGISDataType"
				},
				"impl06": {
					"description": "RasterDataType Implementation",
					"$ref": "#/definitions/RasterDataType"
				},
				"impl07": {
					"description": "ShapefileDataType Implementation",
					"$ref": "#/definitions/ShapefileDataType"
				},
				"impl08": {
					"description": "TextDataType Implementation",
					"$ref": "#/definitions/TextDataType"
				},
				"impl09": {
					"description": "URLParameterDataType Implementation",
					"$ref": "#/definitions/URLParameterDataType"
				},
				"impl10": {
					"description": "WfsDataType Implementation",
					"$ref": "#/definitions/WfsDataType"
				}
			}
		},
		"ResourceMetadata": {
			"type": "object",
			"properties": {
				"availability": {
					"type": "string",
					"description": "String to describe the status (UP, UNAVAILABLE (something is going on), DOWN (It has been turned off)"
				},
				"classType": {
					"description": "Classification of the service",
					"$ref": "#/definitions/SecurityClassification"
				},
				"clientCertRequired": {
					"type": "boolean",
					"example": false,
					"description": "Is a client certificate required?   Could be a user certificate or computer certificate…"
				},
				"contacts": {
					"type": "string",
					"description": "Name, e-mail and phone number of point of contact (String concatenated together)"
				},
				"createdBy": {
					"type": "string"
				},
				"createdDate": {
					"type": "string"
				},
				"credentialsRequired": {
					"type": "boolean",
					"example": false,
					"description": "Are credentials required to access this service?"
				},
				"description": {
					"type": "string",
					"description": "Human-readable description of the object."
				},
				"format": {
					"type": "string",
					"description": "In case of ComplexData, Format defines the allowed input representation"
				},
				"metadata": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},
				"name": {
					"type": "string",
					"description": "Human-readable name of the object."
				},
				"networkAvailable": {
					"type": "string"
				},
				"numericKeyValueList": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NumericKeyValue"
					}
				},
				"preAuthRequired": {
					"type": "boolean",
					"example": false,
					"description": "Is preauthorization required before using the service?  (e.g. do users need to sign a user agreement, etc.)"
				},
				"qos": {
					"type": "string",
					"description": "Quality level of the service (Production, Development)"
				},
				"reason": {
					"type": "string"
				},
				"tags": {
					"type": "string",
					"description": "Keywords describing the service"
				},
				"textKeyValueList": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/TextKeyValue"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SecurityClassification": {
			"type": "object",
			"properties": {
				"classification": {
					"type": "string"
				}
			}
		},
		"RasterDataType": {
			"type": "object",
			"properties": {
				"location": {
					"description": "The location of the data. Used to describe S3 stores, or folder shares, for where the data is located.",
					"$ref": "#/definitions/FileLocation"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"JobStatus": {
			"type": "object",
			"required": ["jobId", "jobType", "status", "submittedBy"],
			"properties": {
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"jobType": {
					"type": "string",
					"description": "Polymorphically describes the information defining what actions this Job should take."
				},
				"progress": {
					"$ref": "#/definitions/JobProgress"
				},
				"result": {
					"type": "object",
					"description": "A reference to the Result of the Job. This could be a Resource ID, or a Service ID, in certain cases. Or perhaps an error if the Job encountered an error during processing."
				},
				"status": {
					"type": "string",
					"description": "The status of the Job. Submitted, Running, Success, Error, or Failure."
				},
				"submittedBy": {
					"type": "string",
					"description": "The name of the user who submitted the Job."
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"Pagination": {
			"type": "object",
			"properties": {
				"count": {
					"type": "integer",
					"format": "int32",
					"description": " The number of results that matched the query."
				},
				"page": {
					"type": "integer",
					"format": "int32",
					"description": "The current page returned."
				},
				"per_page": {
					"type": "integer",
					"format": "int32",
					"description": "The current number of results returned per page."
				}
			}
		},
		"ServiceResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"data": {
					"type": "array",
					"description": "The array of Service results.",
					"items": {
						"$ref": "#/definitions/Service"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"ServiceResponse": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"service": {
					"$ref": "#/definitions/Service"
				},
				"serviceId": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"Trigger": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"condition": {
					"description": "Defines the trigger conditions, the query replacements, and the Job to execute upon this object becoming Triggered.",
					"$ref": "#/definitions/Condition"
				},
				"id": {
					"type": "string",
					"description": "The unique identifier for this Event."
				},
				"job": {
					"description": "The Template of the Job to be executed when the conditions are met.",
					"$ref": "#/definitions/PiazzaJobRequest"
				},
				"percolationId": {
					"type": "string"
				},
				"title": {
					"type": "string",
					"description": "The human-readable description of what this Trigger intends to accomplish."
				}
			}
		},
		"URLParameterDataType": {
			"type": "object",
			"properties": {
				"content": {
					"type": "string"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"DataType": {
			"type": "object"
		},
		"BodyDataType": {
			"type": "object",
			"properties": {
				"content": {
					"type": "string"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"TextKeyValue": {
			"type": "object",
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"LoadJob": {
			"type": "object",
			"required": ["data", "host", "type"],
			"properties": {
				"data": {
					"description": "The Description of the Data being loaded, including metadata, and the path to the data.",
					"$ref": "#/definitions/DataResource"
				},
				"host": {
					"type": "boolean",
					"example": false,
					"description": "Dictates if Piazza should internally host the data or not. If set to true, then the data will be stored in Piazza's data holdings. If false, then Piazza will point to the location of the data, but will not store the data internally."
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"ExecuteJob": {
			"type": "object",
			"required": ["data", "type"],
			"properties": {
				"data": {
					"description": "The parameter inputs for Service execution.",
					"$ref": "#/definitions/ExecuteServiceData"
				},
				"jobId": {
					"type": "string",
					"description": "The JobID created for executing the service."
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"Condition": {
			"type": "object",
			"properties": {
				"eventtype_ids": {
					"type": "array",
					"description": "The array of Event Type IDs.",
					"items": {
						"type": "string"
					}
				},
				"query": {
					"type": "object",
					"description": "The Elastic Search query string."
				}
			}
		},
		"ShapefileDataType": {
			"type": "object",
			"properties": {
				"databaseTableName": {
					"type": "string",
					"description": "The PostGIS table name that contains the Shapefile data."
				},
				"location": {
					"description": "The location of the data. Used to describe S3 stores, or folder shares, for where the data is located.",
					"$ref": "#/definitions/FileLocation"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"GeoJsonDataType": {
			"type": "object",
			"properties": {
				"databaseTableName": {
					"type": "string"
				},
				"geoJsonContent": {
					"type": "string"
				},
				"location": {
					"description": "The location of the data. Used to describe S3 stores, or folder shares, for where the data is located.",
					"$ref": "#/definitions/FileLocation"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"SpatialMetadata": {
			"type": "object",
			"properties": {
				"coordinateReferenceSystem": {
					"type": "string",
					"description": "The CRS (Coordinate Reference System) of the data."
				},
				"epsgCode": {
					"type": "integer",
					"format": "int32",
					"description": "The EPSG code of the CRS."
				},
				"maxX": {
					"type": "number",
					"format": "double",
					"description": "Maximum X bounds."
				},
				"maxY": {
					"type": "number",
					"format": "double",
					"description": "Maximum Y bounds."
				},
				"maxZ": {
					"type": "number",
					"format": "double",
					"description": "Maximum Z bounds."
				},
				"minX": {
					"type": "number",
					"format": "double",
					"description": "Minimum X bounds."
				},
				"minY": {
					"type": "number",
					"format": "double",
					"description": "Minimum Y bounds."
				},
				"minZ": {
					"type": "number",
					"format": "double",
					"description": "Minimum Z bounds."
				},
				"numFeatures": {
					"type": "integer",
					"format": "int32",
					"description": "The number of features contained in the resource."
				}
			}
		},
		"DataResourceResponse": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"data": {
					"$ref": "#/definitions/DataResource"
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"type": {
					"type": "string"
				}
			}
		},
		"NumericKeyValue": {
			"type": "object",
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"Service": {
			"type": "object",
			"required": ["contractUrl", "method", "serviceId", "url"],
			"properties": {
				"contractUrl": {
					"type": "string",
					"description": "URL to the schema or contract to interface with the service, such as a Swagger file, or documentation."
				},
				"method": {
					"type": "string",
					"description": "The HTTP method used to invoke this user service."
				},
				"resourceMetadata": {
					"$ref": "#/definitions/ResourceMetadata"
				},
				"serviceId": {
					"type": "string",
					"description": "The unique identifier of the user servie."
				},
				"url": {
					"type": "string",
					"description": "The URL to the user service to be executed."
				}
			}
		},
		"PiazzaJobRequest": {
			"type": "object",
			"properties": {
				"jobType": {
					"$ref": "#/definitions/PiazzaJobType"
				},
				"userName": {
					"type": "string"
				}
			}
		},
		"DataResource": {
			"type": "object",
			"required": ["dataType"],
			"properties": {
				"dataId": {
					"type": "string",
					"description": "The ID of the data to download."
				},
				"dataType": {
					"description": "Polymorphically defines the information specific to this Data Resource, based on its format.",
					"$ref": "#/definitions/DataTypeInterface"
				},
				"metadata": {
					"$ref": "#/definitions/ResourceMetadata"
				},
				"spatialMetadata": {
					"$ref": "#/definitions/SpatialMetadata"
				}
			}
		},
		"LiteralDataType": {
			"type": "object",
			"properties": {
				"literalType": {
					"type": "string",
					"enum": ["DOUBLE", "FLOAT", "SHORT", "LONG", "BYTE", "CHAR", "BOOLEAN", "STRING"]
				},
				"mimeType": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"EventTypeResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"eventTypes": {
					"type": "array",
					"description": "The array of EventType results.",
					"items": {
						"$ref": "#/definitions/EventType"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"AlertResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"alerts": {
					"type": "array",
					"description": "The array of Alert results.",
					"items": {
						"$ref": "#/definitions/Alert"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"ExecuteServiceData": {
			"type": "object",
			"required": ["dataInputs", "dataOutput", "serviceId"],
			"properties": {
				"dataInputs": {
					"type": "object",
					"description": "The Inputs for the execution.",
					"additionalProperties": {
						"$ref": "#/definitions/DataType"
					}
				},
				"dataOutput": {
					"type": "array",
					"description": "The Output for the execution.",
					"items": {
						"$ref": "#/definitions/DataType"
					}
				},
				"serviceId": {
					"type": "string",
					"description": "The ID of the Service to Execute."
				}
			}
		},
		"PiazzaJobType": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				}
			}
		},
		"FileLocation": {
			"type": "object",
			"properties": {
				"fileName": {
					"type": "string"
				},
				"fileSize": {
					"type": "integer",
					"format": "int64"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"PostGISDataType": {
			"type": "object",
			"properties": {
				"database": {
					"type": "string"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"table": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"WorkflowResponse": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"id": {
					"type": "string",
					"description": "The ID of the item that has been created from the request."
				}
			}
		},
		"AccessJob": {
			"type": "object",
			"properties": {
				"dataId": {
					"type": "string"
				},
				"deploymentType": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"Event": {
			"type": "object",
			"required": ["eventtype_id", "id"],
			"properties": {
				"data": {
					"type": "object",
					"description": "The populated values for the Key-value pairs defined by the Event Type's 'mapping' dictionary. Each value in this dictionary must be populated here under this 'data' property."
				},
				"date": {
					"type": "string"
				},
				"eventtype_id": {
					"type": "string",
					"description": "The unique identifier of the Event Type whose schema this Event conforms to."
				},
				"id": {
					"type": "string",
					"description": "The unique identifier for this Event."
				}
			}
		},
		"Alert": {
			"type": "object",
			"required": ["id"],
			"properties": {
				"eventId": {
					"type": "string",
					"description": "The unique identifier for the Event that triggered the Trigger."
				},
				"id": {
					"type": "string",
					"description": "The unique identifier for this Alert."
				},
				"triggerId": {
					"type": "string",
					"description": "The unique identifier for the Trigger that was hit."
				}
			}
		},
		"DeploymentResults": {
			"type": "object",
			"required": ["jobId"],
			"properties": {
				"data": {
					"type": "array",
					"description": "The array of Deployment results.",
					"items": {
						"$ref": "#/definitions/Deployment"
					}
				},
				"jobId": {
					"type": "string",
					"description": "The ID of the Job that has been created from the request."
				},
				"pagination": {
					"description": "The pagination metadata for this query.",
					"$ref": "#/definitions/Pagination"
				},
				"type": {
					"type": "string",
					"description": "Legacy. This will eventually be removed."
				}
			}
		},
		"WfsDataType": {
			"type": "object",
			"properties": {
				"featureType": {
					"type": "string"
				},
				"mimeType": {
					"type": "string",
					"description": "The media type of the stored data"
				},
				"type": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"JobProgress": {
			"type": "object",
			"properties": {
				"percentComplete": {
					"type": "integer",
					"format": "int32",
					"description": "The percentage complete for the Job, in whole numbers, out of 100 percent"
				},
				"timeRemaining": {
					"type": "string",
					"description": "The last value for the Time Remaining as reported by the processor of this Job."
				},
				"timeSpent": {
					"type": "string",
					"description": "The amount of time spent by the processor of this Job, according to that processor."
				}
			}
		}
	}
}
